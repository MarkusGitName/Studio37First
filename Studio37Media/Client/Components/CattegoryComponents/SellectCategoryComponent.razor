@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Studio37Media.Shared.ViewModels


@using System.IO
@using BlazorInputFile
@using System.IO.MemoryMappedFiles

@inject HttpClient Http

<div>
Sellect PostCategory component
</div> 

   <EditForm Model="@categoryId" OnValidSubmit="@HandleFormSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
       @foreach (Category category in CategoryList) 
       { 
           <div>@category.Category1   </div>
           <div>@category.SubCategory   </div>
           <button onclick=""></button>
       }

        <div class="form-group row">
            <label for="f" class="col-sm-1 col-form-label">category</label>
            <div class="col-sm-5">
                <InputSelect id="Category" class="form-control"
                             @bind-Value="categoryId">
                    @foreach (Category cataegory in CategoryList)
                    {
                        <h4>@cataegory.Category1  @cataegory.SubCategory</h4>
                   
                        <option>@cataegory.id</option>
                    }
                    </InputSelect>
            </div>
        </div>

        <button class="class=" btn btn-primary"" type="submit">Submit</button>
    </EditForm>
@code {
    List<Category> CategoryList = new List<Category>();


    //This code runs on component load
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("component Load Started");
        CategoryList = await Http.GetFromJsonAsync<List<Category>>("Cattegory/GetCategory");
    }

    [Parameter]
    public Guid ObjectID { get; set; }
    [Parameter]
    public string ObjectType { get; set; }

    Guid categoryId;


    //This runs on form submit
    async void HandleFormSubmit()
    {
        if (ObjectType == "Post")
        {

            PostCattegory newPostCattegory = new PostCattegory();
            newPostCattegory.CategoryID = categoryId;
            newPostCattegory.PostID = ObjectID;
            await Http.PostAsJsonAsync<PostCattegory>("PostCattegory/NewPostCategory", newPostCattegory);
        }

        if (ObjectType == "ClassVideo")
        {
            ClassVideoCattegory newClassVideoCattegory = new ClassVideoCattegory();
            newClassVideoCattegory.CattegoryID = categoryId;
            newClassVideoCattegory.ClassVideoID = ObjectID;
            await Http.PostAsJsonAsync<ClassVideoCattegory>("ClassVideoCattegory/NewClassVideoCategory", newClassVideoCattegory);
        }

        if (ObjectType == "LiveShow")
        {
            LiveShowCattegory newLiveShowCattegory = new LiveShowCattegory();
            newLiveShowCattegory.CattegoryID = categoryId;
            newLiveShowCattegory.LiveShowID = ObjectID;
            await Http.PostAsJsonAsync<LiveShowCattegory>("LiveShowCattegory/NewLiveShowCategory", newLiveShowCattegory);
        }

        if (ObjectType == "Sticker")
        {
            StickerCattegory newStickerCattegory = new StickerCattegory();
            newStickerCattegory.CategoryID = categoryId;
            newStickerCattegory.StickeID = ObjectID;
            await Http.PostAsJsonAsync<StickerCattegory>("NewUserCategory/NewStickerCategory", newStickerCattegory);
        }

        if (ObjectType == "Tutorial")
        {
            TutorialCattegory newTutorialCattegory = new TutorialCattegory();
            newTutorialCattegory.CattegoryID = categoryId;
            newTutorialCattegory.TutorialID = ObjectID;
            await Http.PostAsJsonAsync<TutorialCattegory>("TutorialCategory/NewTutorialCategory", newTutorialCattegory);
        }

        if (ObjectType == "User")
        {

            UserCattegory newUserCattegory = new UserCattegory();
            newUserCattegory.CattegorryID = categoryId;
            newUserCattegory.UserID = ObjectID.ToString();
            await Http.PostAsJsonAsync<UserCattegory>("UserCategory/NewUserCategory", newUserCattegory);
        }

    }

}
