@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Studio37Media.Shared.ViewModels


@using System.IO
@using BlazorInputFile
@using System.IO.MemoryMappedFiles


@attribute [Authorize]
@inject HttpClient Http
<EditForm Model="@newPhoto" OnValidSubmit="@HandlePhotoFormSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="modal" id="photoPostModal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0">
                    <h4 class="modal-title">Photo</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <div class="custom-file my-2" id="customFile" lang="es">
                            <InputFile OnChange="PhotoSelection" type="file" class="custom-file-input" id="photoPost" aria-describedby="fileHelp" />

                            <label class="custom-file-label" for="photoPost">
                                @PhotoUploadStats
                            </label>
                        </div>
                        <InputTextArea  @bind-Value="newPhoto.Caption" class="form-control my-2" rows="5" id="caption" placeholder="caption"/>
                    </div>
                    <button type="submit" class="btn btn-light btn-block" btn btn-primary"" >Upload</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public EventCallback<Photo> ReturnPhoto { get; set; }

    string PhotoUploadStats = "Select file...";

    // file contents declaration
    MultipartFormDataContent PhotoContent = new MultipartFormDataContent();

    Photo newPhoto = new Photo();

    //This runs on form submit
    async void HandlePhotoFormSubmit()
    {
        Console.WriteLine("form handle started");
        newPhoto.id = Guid.NewGuid();

        //post call to fileUploadConstructer (endpoint)
        await Http.PostAsync("FileUpload", PhotoContent);
       // await Http.PostAsJsonAsync<Photo>("Photo/NewPhoto", newPhoto);

        Console.WriteLine("form handle ran");


       await ReturnPhoto.InvokeAsync(newPhoto);
    }


    // This runs on profile Photo file selection
    async Task PhotoSelection(IFileListEntry[] files)
    {

        Console.WriteLine("file selection started");
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            PhotoUploadStats = $"Finished loading {file.Size} bytes from {file.Name}";

            PhotoContent = new MultipartFormDataContent {
                { new ByteArrayContent(ms.GetBuffer()), "uploads/PostPhotos", file.Name }
            };

            newPhoto.Path = "/uploads/PostPhotos/" + file.Name;


        }

    }
}
